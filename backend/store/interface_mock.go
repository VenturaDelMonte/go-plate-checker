// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	models "github.com/VenturaDelMonte/go-plate-checker/backend/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlateStore is a mock of PlateStore interface
type MockPlateStore struct {
	ctrl     *gomock.Controller
	recorder *MockPlateStoreMockRecorder
}

// MockPlateStoreMockRecorder is the mock recorder for MockPlateStore
type MockPlateStoreMockRecorder struct {
	mock *MockPlateStore
}

// NewMockPlateStore creates a new mock instance
func NewMockPlateStore(ctrl *gomock.Controller) *MockPlateStore {
	mock := &MockPlateStore{ctrl: ctrl}
	mock.recorder = &MockPlateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlateStore) EXPECT() *MockPlateStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPlateStore) Get(arg0 models.PlateID) (models.Plate, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Plate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPlateStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlateStore)(nil).Get), arg0)
}

// Set mocks base method
func (m *MockPlateStore) Set(arg0 models.PlateID, arg1 models.Plate) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockPlateStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPlateStore)(nil).Set), arg0, arg1)
}
